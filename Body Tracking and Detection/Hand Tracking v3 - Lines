import cv2
import mediapipe as mp 
import time
import numpy as np
import random

cap = cv2.VideoCapture(0)

wb_w = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
wb_h = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

pace = 0.5

dw_img = np.zeros((int(wb_h/pace),int(wb_w/pace),3), np.uint8)

#cv2.imshow('Test Screen',dw_img)

mpHands = mp.solutions.hands
hands = mpHands.Hands()
mpDraw = mp.solutions.drawing_utils

pTime = 0
cTime = 0

activate = 0

prv_cx=0
prv_cy=0


while True:
	success, img = cap.read()
	imgRBG = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
	results = hands.process(imgRBG)
	print(results.multi_hand_landmarks)

	if results.multi_hand_landmarks:
		for handLms in results.multi_hand_landmarks:
			for id, lm in enumerate(handLms.landmark):
				# print(id,lm)
				h, w, c = img.shape
				cx, cy = (int(lm.x * w), int(lm.y * h))
				print(id, cx, cy)
				if id == 8:
					cv2.circle(img, (cx,cy), 15, (255,0,255), cv2.FILLED)
    
     
				if id == 8 and activate==1:
						cv2.line(dw_img,(int(prv_cx//pace),int(prv_cy//pace)),(int(cx//pace),int(cy//pace)),color=(random.randint(1,255),random.randint(1,255),random.randint(1,255)),thickness=2)
						prv_cx=cx
						qqqqqqqprv_cy=cy
			
			mpDraw.draw_landmarks(img, handLms, mpHands.HAND_CONNECTIONS)
			


	cTime = time.time()
	fps = 1/(cTime-pTime)
	pTime = cTime

	cv2.putText(img,str(int(fps)),(10,70),cv2.FONT_HERSHEY_PLAIN,3,(255,0,255),3)

	cv2.imshow("Image",cv2.flip(img, 1))
	cv2.imshow('Track Image',cv2.flip(dw_img,1))
    
	if cv2.waitKey(1) & 0xFF == ord('t'):
		if activate==1:
			activate=0
		else:
			activate=1
			if id == 8:
				prv_cx=cx
				prv_cy=cy
    
	if cv2.waitKey(1) & 0xFF == ord('q'):
		break